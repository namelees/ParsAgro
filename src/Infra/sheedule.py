import asyncio
from datetime import datetime
from telegram import Update

async def get_schedule(update: Update, context, user_urls):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.message.from_user
    user_id = user.id
    
    if user_id not in user_urls:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π —Å–≤–æ—é –≥—Ä—É–ø–ø—É!\n"
            "–ù–∞–∂–º–∏ 'üéØ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É'"
        )
        return
    
    url = user_urls[user_id]
    group_number = url.split('/')[-1]
    
    print(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    status_msg = await update.message.reply_text(f"üîÑ –ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    
    try:
        print("üîÑ –í—ã–∑–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞...")
        await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä...")
        
        schedule_data = await parse_schedule_with_containers(url)
        
        if not schedule_data:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return
        
        await status_msg.edit_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(schedule_data)} –¥–Ω–µ–π —Å –∑–∞–Ω—è—Ç–∏—è–º–∏. –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        
        await send_structured_schedule(update, group_number, schedule_data)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

async def parse_schedule_with_containers(group_url):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Playwright"""
    from playwright.async_api import async_playwright
    
    print(f"üîÑ –ü–ê–†–°–ï–†: –ù–∞—á–∞–ª–æ –¥–ª—è {group_url}")
    
    try:
        print("1. –ò–º–ø–æ—Ä—Ç Playwright...")
        
        async with async_playwright() as p:
            print("2. –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
            browser = await p.chromium.launch(
                headless=True,
                args=['--no-sandbox', '--disable-setuid-sandbox']
            )
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
            print("3. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            page = await browser.new_page()
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Å–æ–ª–∏
            async def handle_console(msg):
                if msg.type in ['error', 'warning']:
                    print(f"üö® –ö–æ–Ω—Å–æ–ª—å {msg.type}: {msg.text}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏
            async def handle_response(response):
                if response.status >= 400:
                    print(f"üö® HTTP –æ—à–∏–±–∫–∞ {response.status}: {response.url}")
            
            page.on("console", handle_console)
            page.on("response", handle_response)
            
            print(f"4. –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL: {group_url}")
            response = await page.goto(group_url, wait_until='networkidle', timeout=60000)
            print(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. Status: {response.status}")
            
            # –ñ–¥–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript...")
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                await page.wait_for_selector('.box-limiter div', timeout=10000)
                print("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
            except:
                print("‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã...")
                await page.wait_for_timeout(3000)
            
            title = await page.title()
            print(f"‚úÖ Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            body_text = await page.text_content('body')
            print(f"üìÑ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ body: {len(body_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ç–µ—Å—Ç–∞
            all_containers = []
            container_num = 1
            
            while container_num <= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è —Ç–µ—Å—Ç–∞
                container_selector = f'#page-main > div > div > div:nth-child(7) > div > div > div:nth-child({container_num}) > div > div'
                container = await page.query_selector(container_selector)
                
                if not container:
                    break
                
                container_data = {
                    'container_number': container_num,
                    'lessons': []
                }
                
                lesson_num = 1
                while lesson_num <= 10:
                    lesson_selector = f'{container_selector} > div:nth-child({lesson_num})'
                    lesson_element = await page.query_selector(lesson_selector)
                    
                    if not lesson_element:
                        break
                    
                    text = await lesson_element.text_content()
                    if text and text.strip():
                        container_data['lessons'].append({
                            'lesson_number': lesson_num,
                            'text': text.strip()
                        })
                    
                    lesson_num += 1
                
                if container_data['lessons']:
                    all_containers.append(container_data)
                    print(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_num}: {len(container_data['lessons'])} –∑–∞–Ω—è—Ç–∏–π")
                
                container_num += 1
            
            await browser.close()
            print(f"üéâ –ü–ê–†–°–ï–†: –ù–∞–π–¥–µ–Ω–æ {len(all_containers)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
            return all_containers
            
    except Exception as e:
        print(f"üí• –ü–ê–†–°–ï–†: –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        print(f"üí• Traceback: {traceback.format_exc()}")
        return None

async def send_structured_schedule(update: Update, group_name: str, schedule_data: list):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    total_lessons = sum(len(container['lessons']) for container in schedule_data)
    
    for container in schedule_data:
        Day_num = container['container_number']
        lessons = container['lessons']
        
        if not lessons:
            continue
        
        container_header = (
            f"üì¶ –î–ï–ù–¨ #{Day_num}\n"
            f"üìö –ó–∞–Ω—è—Ç–∏–π: {len(lessons)}\n"
        )
        await update.message.reply_text(container_header)
        
        for lesson in lessons:
            lesson_num = lesson['lesson_number']
            lesson_text = lesson['text']
            
            lesson_message = (
                f"üéØ –ó–∞–Ω—è—Ç–∏–µ {lesson_num}\n"
                f"{'‚îÄ'*20}\n"
                f"{lesson_text}\n"
                f"{'‚îÄ'*20}"
            )
            
            await update.message.reply_text(lesson_message)
            await asyncio.sleep(0.2)
        
        await asyncio.sleep(0.3)
    
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n"
        f"üì¶ –î–Ω–µ–π –∑–∞–Ω—è—Ç–∏–π: {len(schedule_data)}\n"
        f"üéØ –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {total_lessons}\n"
        f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        f"–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏ 'üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'"
    )

async def test_playwright(update: Update, context):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
    try:
        print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê PLAYWRIGHT")
        await update.message.reply_text("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç Playwright...")
        
        from playwright.async_api import async_playwright
        
        async with async_playwright() as p:
            print("1. –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
            await update.message.reply_text("1. üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            browser = await p.chromium.launch(
                headless=True,
                args=['--no-sandbox', '--disable-setuid-sandbox']
            )
            print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            await update.message.reply_text("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
            print("2. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            await update.message.reply_text("2. üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            page = await browser.new_page()
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            await update.message.reply_text("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            print("3. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Google...")
            await update.message.reply_text("3. üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Google...")
            await page.goto('https://www.google.com', timeout=30000)
            print("‚úÖ Google –∑–∞–≥—Ä—É–∂–µ–Ω")
            await update.message.reply_text("‚úÖ Google –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            title = await page.title()
            print(f"‚úÖ Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
            await update.message.reply_text(f"‚úÖ Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
            
            await browser.close()
            print("üéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù - Playwright —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            await update.message.reply_text("üéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! Playwright —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
    except Exception as e:
        print(f"üí• –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        await update.message.reply_text(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {str(e)}")
