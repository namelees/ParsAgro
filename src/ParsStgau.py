import os
import asyncio
import logging
import json
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from Infra.groups import load_groups_data, find_group, get_groups_database
from Infra.sheedule import get_schedule, test_playwright

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –î–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
load_dotenv(".env.txt")
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

user_urls = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
bot_logs = []

class TelegramLogHandler(logging.Handler):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    def __init__(self, bot=None):
        super().__init__()
        self.bot = bot
        self.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    
    def emit(self, record):
        global bot_logs
        log_entry = self.format(record)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        bot_logs.append(log_entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π)
        if len(bot_logs) > 50:
            bot_logs = bot_logs[-50:]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    
    guide_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π.\n\n"
        "üéØ –î–õ–Ø –ù–ê–ß–ê–õ–ê –†–ê–ë–û–¢–´:\n\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π —Å–≤–æ—é –≥—Ä—É–ø–ø—É:\n"
        "/reg –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/reg –ò–°–ü-21-1\n"
        "/reg 22296\n"
        "/reg –ü–†–û–ì-20-1\n\n"
        "2. –ü–æ–ª—É—á–∞–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ!\n\n"
        "üìã –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/logs - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ —Ä–∞–±–æ—Ç—ã\n"
        "/test - —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @Pro100_4elovek19"
    )
    
    reply_markup = ReplyKeyboardMarkup([
        ["üéØ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É"],
        ["üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "‚ùì –ü–æ–º–æ—â—å"]
    ], resize_keyboard=True)
    
    await update.message.reply_text(
        guide_text,
        reply_markup=reply_markup
    )

async def show_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞"""
    user = update.message.from_user
    
    if not bot_logs:
        await update.message.reply_text("üì≠ –õ–æ–≥–∏ –ø–æ–∫–∞ –ø—É—Å—Ç—ã...")
        return
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
    recent_logs = bot_logs[-20:]
    logs_text = "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞:**\n\n" + "\n".join(recent_logs)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(logs_text) > 4000:
        logs_text = logs_text[:4000] + "\n\n... (–ª–æ–≥–∏ –æ–±—Ä–µ–∑–∞–Ω—ã)"
    
    await update.message.reply_text(f"```\n{logs_text}\n```", parse_mode='MarkdownV2')


async def register_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã"""
    user = update.message.from_user
    user_id = user.id
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/reg –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/reg –ò–°–ü-21-1\n"
            "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã!"
        )
        return
    
    group_query = ' '.join(context.args)
    logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—â–µ—Ç –≥—Ä—É–ø–ø—É: {group_query}")
    
    result = find_group(group_query)
    
    if isinstance(result, list):
        if len(result) == 1:
            group_name, group_url = result[0]
            user_urls[user_id] = group_url
            
            await update.message.reply_text(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n"
                f"üìö –ì—Ä—É–ø–ø–∞: {group_name}\n\n"
                f"–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ 'üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'!"
            )
            
        elif len(result) > 1:
            keyboard = []
            for group_name, group_url in result[:5]:  
                keyboard.append([f"üéØ {group_name}"])
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            context.user_data['group_matches'] = result
            
            await update.message.reply_text(
                f"üîç –ù–∞–π–¥–µ–Ω–æ {len(result)} –≥—Ä—É–ø–ø:\n"
                f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ì—Ä—É–ø–ø–∞ '{group_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π:\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã\n"
                f"‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ"
            )

async def handle_group_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    selected_text = update.message.text
    
    if selected_text.startswith("üéØ "):
        selected_group = selected_text[2:] 
    else:
        selected_group = selected_text
    
    matches = context.user_data.get('group_matches', [])
    for group_name, group_url in matches:
        if group_name == selected_group:
            user_urls[user_id] = group_url
            
            reply_markup = ReplyKeyboardMarkup([
                ["üéØ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É"],
                ["üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "‚ùì –ü–æ–º–æ—â—å"]
            ], resize_keyboard=True)
            
            await update.message.reply_text(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                f"–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ 'üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'!",
                reply_markup=reply_markup
            )
            
            context.user_data.pop('group_matches', None)
            return
    
    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã")




async def handle_register_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéØ –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É:\n"
        "/reg –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/reg 25–ò–ò-–î-9-2\n"
        "/reg 22296\n"
        "/reg –ü–†–û–ì-20-1"
    )

async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "‚ùì –ü–û–ú–û–©–¨\n\n"
        "üéØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n"
        "/reg –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã\n\n"
        "üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'\n\n"
        "üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n"
        "/test - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–∞\n"
        "/logs - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏\n\n"
        "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: /start"
    )
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text.startswith("üéØ ") or context.user_data.get('group_matches'):
        await handle_group_selection(update, context)
    elif text == "üéØ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É":
        await handle_register_button(update, context)
    elif text == "üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await get_schedule(update, context, user_urls)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await handle_help(update, context)
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/reg - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã\n"
            "/start - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
            "/test - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
        )

def main():
    load_groups_data()
    
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤
    telegram_handler = TelegramLogHandler()
    logger.addHandler(telegram_handler)
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reg", register_group))
    application.add_handler(CommandHandler("help", handle_help))
    application.add_handler(CommandHandler("test", test_playwright))
    application.add_handler(CommandHandler("logs", show_logs))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    
    application.run_polling()

if __name__ == "__main__":
    main()