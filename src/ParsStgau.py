import os
import asyncio
import logging
import json
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –î–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
load_dotenv(".env.txt")
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

user_urls = {} 
groups_database = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
bot_logs = []

class TelegramLogHandler(logging.Handler):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
    def __init__(self, bot=None):
        super().__init__()
        self.bot = bot
        self.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
    
    def emit(self, record):
        global bot_logs
        log_entry = self.format(record)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        bot_logs.append(log_entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–ø–∏—Å–µ–π)
        if len(bot_logs) > 50:
            bot_logs = bot_logs[-50:]

def load_groups_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø –∏–∑ —Ñ–∞–π–ª–∞"""
    global groups_database
    possible_paths = [
        'src/groups_data.json',
        './src/groups_data.json', 
        f'{os.getcwd()}/src/groups_data.json',
        'groups_data.json',
        os.path.join(os.path.dirname(__file__), 'groups_data.json'),
    ]
    
    for file_path in possible_paths:
        try:
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    groups_database = json.load(f)
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(groups_database)} –≥—Ä—É–ø–ø –∏–∑ {file_path}")
                return
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ {file_path}: {e}")
            continue
    
    logger.error("‚ùå –§–∞–π–ª groups_data.json –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –ø—É—Ç–∏!")
    groups_database = {}

def find_group(query):
    """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –Ω–æ–º–µ—Ä—É"""
    query = query.strip()
    
    # 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
    if query in groups_database:
        return [(query, groups_database[query])]
    
    # 2. –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä—É–ø–ø—ã –≤ URL
    if query.isdigit():
        matches = []
        for group_name, group_url in groups_database.items():
            if query in group_url:
                matches.append((group_name, group_url))
        if matches:
            return matches
    
    # 3. –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    matches = []
    for group_name, group_url in groups_database.items():
        if query in group_name:
            matches.append((group_name, group_url))
        elif query.lower() in group_name.lower():
            matches.append((group_name, group_url))
    
    return matches

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    
    guide_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π.\n\n"
        "üéØ –î–õ–Ø –ù–ê–ß–ê–õ–ê –†–ê–ë–û–¢–´:\n\n"
        "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π —Å–≤–æ—é –≥—Ä—É–ø–ø—É:\n"
        "/reg –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/reg –ò–°–ü-21-1\n"
        "/reg 22296\n"
        "/reg –ü–†–û–ì-20-1\n\n"
        "2. –ü–æ–ª—É—á–∞–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ!\n\n"
        "üìã –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/logs - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ —Ä–∞–±–æ—Ç—ã\n"
        "/test - —Ç–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @Pro100_4elovek19"
    )
    
    reply_markup = ReplyKeyboardMarkup([
        ["üéØ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É"],
        ["üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "‚ùì –ü–æ–º–æ—â—å"]
    ], resize_keyboard=True)
    
    await update.message.reply_text(
        guide_text,
        reply_markup=reply_markup
    )

async def show_logs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞"""
    user = update.message.from_user
    
    if not bot_logs:
        await update.message.reply_text("üì≠ –õ–æ–≥–∏ –ø–æ–∫–∞ –ø—É—Å—Ç—ã...")
        return
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
    recent_logs = bot_logs[-20:]
    logs_text = "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞:**\n\n" + "\n".join(recent_logs)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if len(logs_text) > 4000:
        logs_text = logs_text[:4000] + "\n\n... (–ª–æ–≥–∏ –æ–±—Ä–µ–∑–∞–Ω—ã)"
    
    await update.message.reply_text(f"```\n{logs_text}\n```", parse_mode='MarkdownV2')

async def test_playwright(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞"""
    try:
        logger.info("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê PLAYWRIGHT")
        await update.message.reply_text("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç Playwright...")
        
        from playwright.async_api import async_playwright
        
        async with async_playwright() as p:
            logger.info("1. –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
            await update.message.reply_text("1. üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
            
            browser = await p.chromium.launch(
                headless=True,
                args=['--no-sandbox', '--disable-setuid-sandbox']
            )
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            await update.message.reply_text("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
            logger.info("2. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            await update.message.reply_text("2. üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            page = await browser.new_page()
            logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            await update.message.reply_text("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            logger.info("3. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Google...")
            await update.message.reply_text("3. üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Google...")
            await page.goto('https://www.google.com', timeout=30000)
            logger.info("‚úÖ Google –∑–∞–≥—Ä—É–∂–µ–Ω")
            await update.message.reply_text("‚úÖ Google –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            title = await page.title()
            logger.info(f"‚úÖ Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
            await update.message.reply_text(f"‚úÖ Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
            
            await browser.close()
            logger.info("üéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù - Playwright —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            await update.message.reply_text("üéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! Playwright —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            
    except Exception as e:
        logger.error(f"üí• –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {e}")
        await update.message.reply_text(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: {str(e)}")

async def register_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã"""
    user = update.message.from_user
    user_id = user.id
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/reg –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/reg –ò–°–ü-21-1\n"
            "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã!"
        )
        return
    
    group_query = ' '.join(context.args)
    logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—â–µ—Ç –≥—Ä—É–ø–ø—É: {group_query}")
    
    result = find_group(group_query)
    
    if isinstance(result, list):
        if len(result) == 1:
            group_name, group_url = result[0]
            user_urls[user_id] = group_url
            
            await update.message.reply_text(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n"
                f"üìö –ì—Ä—É–ø–ø–∞: {group_name}\n\n"
                f"–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ 'üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'!"
            )
            
        elif len(result) > 1:
            keyboard = []
            for group_name, group_url in result[:5]:  
                keyboard.append([f"üéØ {group_name}"])
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            context.user_data['group_matches'] = result
            
            await update.message.reply_text(
                f"üîç –ù–∞–π–¥–µ–Ω–æ {len(result)} –≥—Ä—É–ø–ø:\n"
                f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ì—Ä—É–ø–ø–∞ '{group_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π:\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã\n"
                f"‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ"
            )

async def handle_group_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    selected_text = update.message.text
    
    if selected_text.startswith("üéØ "):
        selected_group = selected_text[2:] 
    else:
        selected_group = selected_text
    
    matches = context.user_data.get('group_matches', [])
    for group_name, group_url in matches:
        if group_name == selected_group:
            user_urls[user_id] = group_url
            
            reply_markup = ReplyKeyboardMarkup([
                ["üéØ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É"],
                ["üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "‚ùì –ü–æ–º–æ—â—å"]
            ], resize_keyboard=True)
            
            await update.message.reply_text(
                f"‚úÖ –ì—Ä—É–ø–ø–∞ {group_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                f"–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ 'üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'!",
                reply_markup=reply_markup
            )
            
            context.user_data.pop('group_matches', None)
            return
    
    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã")

async def get_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    
    if user_id not in user_urls:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π —Å–≤–æ—é –≥—Ä—É–ø–ø—É!\n"
            "–ù–∞–∂–º–∏ 'üéØ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É'"
        )
        return
    
    url = user_urls[user_id]
    group_number = url.split('/')[-1]
    
    logger.info(f"üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    status_msg = await update.message.reply_text(f"üîÑ –ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    
    try:
        logger.info("üîÑ –í—ã–∑–æ–≤ –ø–∞—Ä—Å–µ—Ä–∞...")
        await update.message.reply_text("üîç –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä...")
        
        schedule_data = await parse_schedule_with_containers(url)
        
        if not schedule_data:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return
        
        await status_msg.edit_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(schedule_data)} –¥–Ω–µ–π —Å –∑–∞–Ω—è—Ç–∏—è–º–∏. –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        
        await send_structured_schedule(update, group_number, schedule_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

async def parse_schedule_with_containers(group_url):
    from playwright.async_api import async_playwright
    
    logger.info(f"üîÑ –ü–ê–†–°–ï–†: –ù–∞—á–∞–ª–æ –¥–ª—è {group_url}")
    
    try:
        logger.info("1. –ò–º–ø–æ—Ä—Ç Playwright...")
        
        async with async_playwright() as p:
            logger.info("2. –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...")
            browser = await p.chromium.launch(
                headless=True,
                args=['--no-sandbox', '--disable-setuid-sandbox']
            )
            logger.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
            logger.info("3. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            page = await browser.new_page()
            logger.info("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            logger.info(f"4. –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ URL: {group_url}")
            response = await page.goto(group_url, wait_until='networkidle', timeout=60000)
            logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. Status: {response.status}")
            
            title = await page.title()
            logger.info(f"‚úÖ Title —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {title}")
            
            # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ç–µ—Å—Ç–∞
            all_containers = []
            container_num = 1
            
            while container_num <= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è —Ç–µ—Å—Ç–∞
                container_selector = f'#page-main > div > div > div:nth-child(7) > div > div > div:nth-child({container_num}) > div > div'
                container = await page.query_selector(container_selector)
                
                if not container:
                    break
                
                container_data = {
                    'container_number': container_num,
                    'lessons': []
                }
                
                lesson_num = 1
                while lesson_num <= 10:
                    lesson_selector = f'{container_selector} > div:nth-child({lesson_num})'
                    lesson_element = await page.query_selector(lesson_selector)
                    
                    if not lesson_element:
                        break
                    
                    text = await lesson_element.text_content()
                    if text and text.strip():
                        container_data['lessons'].append({
                            'lesson_number': lesson_num,
                            'text': text.strip()
                        })
                    
                    lesson_num += 1
                
                if container_data['lessons']:
                    all_containers.append(container_data)
                    logger.info(f"‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {container_num}: {len(container_data['lessons'])} –∑–∞–Ω—è—Ç–∏–π")
                
                container_num += 1
            
            await browser.close()
            logger.info(f"üéâ –ü–ê–†–°–ï–†: –ù–∞–π–¥–µ–Ω–æ {len(all_containers)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤")
            return all_containers
            
    except Exception as e:
        logger.error(f"üí• –ü–ê–†–°–ï–†: –û—à–∏–±–∫–∞: {str(e)}")
        import traceback
        logger.error(f"üí• Traceback: {traceback.format_exc()}")
        return None

async def send_structured_schedule(update: Update, group_name: str, schedule_data: list):
    total_lessons = sum(len(container['lessons']) for container in schedule_data)
    
    for container in schedule_data:
        Day_num = container['container_number']
        lessons = container['lessons']
        
        if not lessons:
            continue
        
        container_header = (
            f"üì¶ –î–ï–ù–¨ #{Day_num}\n"
            f"üìö –ó–∞–Ω—è—Ç–∏–π: {len(lessons)}\n"
        )
        await update.message.reply_text(container_header)
        
        for lesson in lessons:
            lesson_num = lesson['lesson_number']
            lesson_text = lesson['text']
            
            lesson_message = (
                f"üéØ –ó–∞–Ω—è—Ç–∏–µ {lesson_num}\n"
                f"{'‚îÄ'*20}\n"
                f"{lesson_text}\n"
                f"{'‚îÄ'*20}"
            )
            
            await update.message.reply_text(lesson_message)
            await asyncio.sleep(0.2)
        
        await asyncio.sleep(0.3)
    
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n"
        f"üì¶ –î–Ω–µ–π –∑–∞–Ω—è—Ç–∏–π: {len(schedule_data)}\n"
        f"üéØ –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: {total_lessons}\n"
        f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        f"–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏ 'üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'"
    )

async def handle_register_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéØ –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É:\n"
        "/reg –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "/reg 25–ò–ò-–î-9-2\n"
        "/reg 22296\n"
        "/reg –ü–†–û–ì-20-1"
    )

async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "‚ùì –ü–û–ú–û–©–¨\n\n"
        "üéØ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n"
        "/reg –Ω–∞–∑–≤–∞–Ω–∏–µ_–≥—Ä—É–ø–ø—ã\n\n"
        "üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'\n\n"
        "üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n"
        "/test - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–∞\n"
        "/logs - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏\n\n"
        "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: /start"
    )
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text.startswith("üéØ ") or context.user_data.get('group_matches'):
        await handle_group_selection(update, context)
    elif text == "üéØ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É":
        await handle_register_button(update, context)
    elif text == "üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await get_schedule(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await handle_help(update, context)
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/reg - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã\n"
            "/start - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
            "/test - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
        )

def main():
    load_groups_data()
    
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤
    telegram_handler = TelegramLogHandler()
    logger.addHandler(telegram_handler)
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reg", register_group))
    application.add_handler(CommandHandler("help", handle_help))
    application.add_handler(CommandHandler("test", test_playwright))
    application.add_handler(CommandHandler("logs", show_logs))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    
    application.run_polling()

if __name__ == "__main__":
    main()