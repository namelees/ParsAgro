import os
import asyncio
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

load_dotenv(".env.txt")
TOKEN = os.getenv('BOT_TOKEN')
if not TOKEN:
    raise ValueError("‚ùå TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_urls = {} 

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    
    guide_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π.\n\n"
        "üìñ –ö–ê–ö –ü–û–õ–£–ß–ò–¢–¨ URL –†–ê–°–ü–ò–°–ê–ù–ò–Ø:\n"
        "1. –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ —Å–∞–π—Ç: https://lk2.stgau.ru/WebApp/#/Rasp\n"
        "2. –ù–∞–π–¥–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–∫–µ\n"
        "3. –ù–∞–∂–º–∏ –Ω–∞ –≥—Ä—É–ø–ø—É - –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        "4. –°–∫–æ–ø–∏—Ä—É–π URL –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞\n"
        "5. –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ –∫–æ–º–∞–Ω–¥–æ–π: /reg —Ç–≤–æ–π_url\n\n"
        "üîó –ü—Ä–∏–º–µ—Ä URL:\n"
        "https://lk2.stgau.ru/WebApp/#/Rasp/Group/22222 \n "
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—Å–∞—Ç—å –Ω–∞ –¢–ì –°–æ–∑–¥–∞—Ç–µ–ª—è –∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞, –æ–Ω –ø—Ä–∏–≤–µ–¥–µ–Ω –Ω–∏–∂–µ \n"
        " @Pro100_4elovek19"
    )
    
    reply_markup = ReplyKeyboardMarkup([
        ["üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å URL"],
        ["üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "‚ùì –ü–æ–º–æ—â—å"]
    ], resize_keyboard=True)
    
    await update.message.reply_text(
        guide_text,
        reply_markup=reply_markup
    )

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reg –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.message.from_user
    user_id = user.id
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/reg –≤–∞—à_url\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/reg https://lk2.stgau.ru/WebApp/#/Rasp/Group/22222"
        )
        return
    
    url = ' '.join(context.args)
    
    if not url.startswith('https://lk2.stgau.ru/WebApp/#/Rasp/Group/'):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π URL!\n"
            "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å:\n"
            "https://lk2.stgau.ru/WebApp/#/Rasp/Group/\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
        )
        return
    
    user_urls[user_id] = url
    group_number = url.split('/')[-1]
    
    await update.message.reply_text(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
        f"–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ 'üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'!"
    )

async def get_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    user = update.message.from_user
    user_id = user.id
    
    if user_id not in user_urls:
        await update.message.reply_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π —Å–≤–æ–π URL!\n"
            "–ù–∞–∂–º–∏ 'üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å URL'"
        )
        return
    
    url = user_urls[user_id]
    group_number = url.split('/')[-1]
    
    status_msg = await update.message.reply_text(f"üîÑ –ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑ ParsStgau
        from libs.ParsStgau import parse_schedule_with_containers, send_structured_schedule
        
        schedule_data = await parse_schedule_with_containers(url)
        
        if not schedule_data:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return
        
        await status_msg.edit_text(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(schedule_data)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏. –û—Ç–ø—Ä–∞–≤–ª—è—é...")
        
        await send_structured_schedule(update, group_number, schedule_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

async def handle_register_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "üìã –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É:\n"
        "/reg —Ç–≤–æ–π_url\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/reg https://lk2.stgau.ru/WebApp/#/Rasp/Group/22222"
    )

async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
    help_text = (
        "‚ùì –ü–û–ú–û–©–¨\n\n"
        "üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:\n"
        "1. –ù–∞–π–¥–∏ URL –Ω–∞ —Å–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n"
        "2. –û—Ç–ø—Ä–∞–≤—å: /reg —Ç–≤–æ–π_url\n\n"
        "üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É 'üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'\n\n"
        "üîó –ü—Ä–∏–º–µ—Ä URL:\n"
        "https://lk2.stgau.ru/WebApp/#/Rasp/Group/22222\n\n"
        "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: /start"
    )
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    if text == "üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å URL":
        await handle_register_button(update, context)
    elif text == "üìÖ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        await get_schedule(update, context)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await handle_help(update, context)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üëÜ")

def setup_handlers(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reg", register)) 
    application.add_handler(CommandHandler("help", handle_help))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

def create_application():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram"""
    application = Application.builder().token(TOKEN).build()
    setup_handlers(application)
    return application

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = create_application()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()
